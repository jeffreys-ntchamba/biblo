// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "nom_ASC"
  | "nom_DESC"
  | "categorie_ASC"
  | "categorie_DESC"
  | "statut_ASC"
  | "statut_DESC"
  | "date1_ASC"
  | "date1_DESC"
  | "date2_ASC"
  | "date2_DESC"
  | "date3_ASC"
  | "date3_DESC"
  | "photo_ASC"
  | "photo_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  nom?: Maybe<String>;
  nom_not?: Maybe<String>;
  nom_in?: Maybe<String[] | String>;
  nom_not_in?: Maybe<String[] | String>;
  nom_lt?: Maybe<String>;
  nom_lte?: Maybe<String>;
  nom_gt?: Maybe<String>;
  nom_gte?: Maybe<String>;
  nom_contains?: Maybe<String>;
  nom_not_contains?: Maybe<String>;
  nom_starts_with?: Maybe<String>;
  nom_not_starts_with?: Maybe<String>;
  nom_ends_with?: Maybe<String>;
  nom_not_ends_with?: Maybe<String>;
  categorie?: Maybe<String>;
  categorie_not?: Maybe<String>;
  categorie_in?: Maybe<String[] | String>;
  categorie_not_in?: Maybe<String[] | String>;
  categorie_lt?: Maybe<String>;
  categorie_lte?: Maybe<String>;
  categorie_gt?: Maybe<String>;
  categorie_gte?: Maybe<String>;
  categorie_contains?: Maybe<String>;
  categorie_not_contains?: Maybe<String>;
  categorie_starts_with?: Maybe<String>;
  categorie_not_starts_with?: Maybe<String>;
  categorie_ends_with?: Maybe<String>;
  categorie_not_ends_with?: Maybe<String>;
  statut?: Maybe<String>;
  statut_not?: Maybe<String>;
  statut_in?: Maybe<String[] | String>;
  statut_not_in?: Maybe<String[] | String>;
  statut_lt?: Maybe<String>;
  statut_lte?: Maybe<String>;
  statut_gt?: Maybe<String>;
  statut_gte?: Maybe<String>;
  statut_contains?: Maybe<String>;
  statut_not_contains?: Maybe<String>;
  statut_starts_with?: Maybe<String>;
  statut_not_starts_with?: Maybe<String>;
  statut_ends_with?: Maybe<String>;
  statut_not_ends_with?: Maybe<String>;
  date1?: Maybe<String>;
  date1_not?: Maybe<String>;
  date1_in?: Maybe<String[] | String>;
  date1_not_in?: Maybe<String[] | String>;
  date1_lt?: Maybe<String>;
  date1_lte?: Maybe<String>;
  date1_gt?: Maybe<String>;
  date1_gte?: Maybe<String>;
  date1_contains?: Maybe<String>;
  date1_not_contains?: Maybe<String>;
  date1_starts_with?: Maybe<String>;
  date1_not_starts_with?: Maybe<String>;
  date1_ends_with?: Maybe<String>;
  date1_not_ends_with?: Maybe<String>;
  date2?: Maybe<String>;
  date2_not?: Maybe<String>;
  date2_in?: Maybe<String[] | String>;
  date2_not_in?: Maybe<String[] | String>;
  date2_lt?: Maybe<String>;
  date2_lte?: Maybe<String>;
  date2_gt?: Maybe<String>;
  date2_gte?: Maybe<String>;
  date2_contains?: Maybe<String>;
  date2_not_contains?: Maybe<String>;
  date2_starts_with?: Maybe<String>;
  date2_not_starts_with?: Maybe<String>;
  date2_ends_with?: Maybe<String>;
  date2_not_ends_with?: Maybe<String>;
  date3?: Maybe<String>;
  date3_not?: Maybe<String>;
  date3_in?: Maybe<String[] | String>;
  date3_not_in?: Maybe<String[] | String>;
  date3_lt?: Maybe<String>;
  date3_lte?: Maybe<String>;
  date3_gt?: Maybe<String>;
  date3_gte?: Maybe<String>;
  date3_contains?: Maybe<String>;
  date3_not_contains?: Maybe<String>;
  date3_starts_with?: Maybe<String>;
  date3_not_starts_with?: Maybe<String>;
  date3_ends_with?: Maybe<String>;
  date3_not_ends_with?: Maybe<String>;
  photo?: Maybe<String>;
  photo_not?: Maybe<String>;
  photo_in?: Maybe<String[] | String>;
  photo_not_in?: Maybe<String[] | String>;
  photo_lt?: Maybe<String>;
  photo_lte?: Maybe<String>;
  photo_gt?: Maybe<String>;
  photo_gte?: Maybe<String>;
  photo_contains?: Maybe<String>;
  photo_not_contains?: Maybe<String>;
  photo_starts_with?: Maybe<String>;
  photo_not_starts_with?: Maybe<String>;
  photo_ends_with?: Maybe<String>;
  photo_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  nom: String;
  categorie: String;
  statut: String;
  date1: String;
  date2: String;
  date3: String;
  photo: String;
}

export interface UserUpdateInput {
  nom?: Maybe<String>;
  categorie?: Maybe<String>;
  statut?: Maybe<String>;
  date1?: Maybe<String>;
  date2?: Maybe<String>;
  date3?: Maybe<String>;
  photo?: Maybe<String>;
}

export interface UserUpdateManyMutationInput {
  nom?: Maybe<String>;
  categorie?: Maybe<String>;
  statut?: Maybe<String>;
  date1?: Maybe<String>;
  date2?: Maybe<String>;
  date3?: Maybe<String>;
  photo?: Maybe<String>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface User {
  id: ID_Output;
  nom: String;
  categorie: String;
  statut: String;
  date1: String;
  date2: String;
  date3: String;
  photo: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  nom: () => Promise<String>;
  categorie: () => Promise<String>;
  statut: () => Promise<String>;
  date1: () => Promise<String>;
  date2: () => Promise<String>;
  date3: () => Promise<String>;
  photo: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  nom: () => Promise<AsyncIterator<String>>;
  categorie: () => Promise<AsyncIterator<String>>;
  statut: () => Promise<AsyncIterator<String>>;
  date1: () => Promise<AsyncIterator<String>>;
  date2: () => Promise<AsyncIterator<String>>;
  date3: () => Promise<AsyncIterator<String>>;
  photo: () => Promise<AsyncIterator<String>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  nom: () => Promise<String>;
  categorie: () => Promise<String>;
  statut: () => Promise<String>;
  date1: () => Promise<String>;
  date2: () => Promise<String>;
  date3: () => Promise<String>;
  photo: () => Promise<String>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  nom: String;
  categorie: String;
  statut: String;
  date1: String;
  date2: String;
  date3: String;
  photo: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  nom: () => Promise<String>;
  categorie: () => Promise<String>;
  statut: () => Promise<String>;
  date1: () => Promise<String>;
  date2: () => Promise<String>;
  date3: () => Promise<String>;
  photo: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  nom: () => Promise<AsyncIterator<String>>;
  categorie: () => Promise<AsyncIterator<String>>;
  statut: () => Promise<AsyncIterator<String>>;
  date1: () => Promise<AsyncIterator<String>>;
  date2: () => Promise<AsyncIterator<String>>;
  date3: () => Promise<AsyncIterator<String>>;
  photo: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
